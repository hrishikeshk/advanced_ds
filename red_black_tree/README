To Build : export one environment flag 'SRC_DIR' to the base of the project (<abs_path>/advanced_ds).


This part is specifically about implementing a red-black tree, that is certain to be heavily used in a larger context. Several implementations are already available. However, the goal here is multi-fold, and there are some differences with respect to other implementations :

1/ Implement a tree that is purely 'offset-based'. Thus, using pointers as links in this structure is eliminated. All pointers are represented as 4 byte unsigned integers or offsets. This helps in ensuring that the tree does not consume more memory on 64-bit OS and the memory consumed does not change based on the OS architecture.

2/ Have the RBTree use a 'free-list' so that memory allocated to deleted nodes can be reused for future insertions. This should help in situations where the same tree undergoes frequent and interleaved insertions and removals.

3/ Nothing apart from a 4 byte integral offset is stored into the tree itself, unlike the std::map offering from STL. The objects are to be managed in any external structure, not necessarily linear. The only constraint on this external structure ('Container') is that it's elements should be accessible through the 4 byte offset.

4/ Since the usage is different, I define a way to use this tree as an index, refer How_to_use.txt for a sample application or read into the unit tests. The 'Container' that is used to hold the list of objects to be searched does not have to be hard-coupled to the indexing tree. The container only needs to support a const form of the array index operator. The index too should not store any information about the objects, apart from a single 4 byte offset so no copying of the satellite data is forced for using the index. The 4 byte offset recorded by the index will be the reference into any type of linear storage container that supports an array index operator function.

5/ By eliminating all pointers from the implementation, the internal structures of the tree are all placed in contiguously allocated arrays or vectors. The expectation is that memory accesses made by the tree should be more localized, compared to what could be with scattered memory accesses. This in turn should provide benefits of fewer cache misses.

**** Of course, there is one drawback to this scheme - You can delete something from the RBTree but you cannot do anything that changes the offsets of existng elements within your Container, implying that deletes cannot be done on the Container. At least not in this version of the Tree... There could be, however, a special type of container used, that complements this RBTree by not changing the offsets of remnant elements after deletion of a few others, by again maintaining a free list of such elements. TODO... ****



